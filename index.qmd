---
title: "Reproducible Documentation with Quarto"
subtitle: "Manual for Python Users"
author: "Dr Thiyanga S. Talagala"
format: html
number-sections: true
toc: true
toc-depth: 2
title-block-banner: true
editor: visual
jupyter: python3
---

# Set up

1.  Install Python on your machine.

2.  Install Quarto

3.  Go to cmd and type

    -   `py --version`

    -   `py -m pip install pandas plotly statsmodels`

    -   `py -m pip install palmerpenguins`

    -   `py -m pip install plotnine`

    Note: The reason for typing `py -m` instead of just `pip` install is to avoid issues where you might have multiple versions of Python installed, and pip could be tied to the wrong version. By running `py -m pip`, you're explicitly telling the Python launcher to use the right Python interpreter and its associated pip.

# Loading packages

```{python}
import pandas as pd
import plotnine as p9 
from plotnine import ggplot, geom_point, aes, stat_smooth, facet_wrap, labs
from palmerpenguins import load_penguins
```

# Data

```{python}
penguins = load_penguins()
penguins.head()
```

# Data Visualisation with `plotnine`

## Step 1: Take data and obtain a canvas for plotting

```{python}
ggplot(penguins)

```

## Step 2: Defining Aesthetics

```{python}
ggplot(penguins, aes("bill_length_mm", "bill_depth_mm", color="factor(species)"))
```

## Step 3: Add Gemetries

```{python}
ggplot(penguins, aes("bill_length_mm", "bill_depth_mm", color="factor(species)")) +  geom_point()
```

## Step 4: Create the plot with customized axis labels

```{python}
ggplot(penguins, aes("bill_length_mm", "bill_depth_mm", color="factor(species)")) +  geom_point()  + labs(x="Bill Length (mm)", y="Bill Depth (mm)")
```

# Change themes

## Without customized themes

```{python}
p9.ggplot(data=penguins,
           mapping=p9.aes(x='factor(species)')) + p9.geom_bar() 
```

## With customized themes

```{python}
p9.ggplot(data=penguins,
           mapping=p9.aes(x='factor(species)')) + p9.geom_bar() + p9.theme_bw() + p9.theme(axis_text_x = p9.element_text(angle=90))
```

# Faceting

## Without faceting

```{python}
ggplot(penguins, aes("bill_length_mm", "bill_depth_mm", color="factor(species)")) +  geom_point()  + labs(x="Bill Length (mm)", y="Bill Depth (mm)") 

```

## With faceting

```{python}
ggplot(penguins, aes("bill_length_mm", "bill_depth_mm", color="factor(species)")) +  geom_point()  + labs(x="Bill Length (mm)", y="Bill Depth (mm)") + facet_wrap("species")

```


# Other geoms

## geom_boxplot

```{python}
p9.ggplot(data=penguins,
           mapping=p9.aes(x='factor(species)', y='bill_length_mm')) + p9.geom_boxplot()
```

## geom_jitter

```{python}
p9.ggplot(data=penguins,
           mapping=p9.aes(x='factor(species)', y='bill_length_mm')) + p9.geom_jitter()
```

## geom_boxplot + geom_jitter

```{python}
p9.ggplot(data=penguins,
           mapping=p9.aes(x='factor(species)', y='bill_length_mm', color='factor(species)')) + p9.geom_boxplot()+ p9.geom_jitter()
```

## To remove outliers from the boxplot in your ggplot code

```{python}
p9.ggplot(data=penguins,
           mapping=p9.aes(x='factor(species)', y='bill_length_mm', color='factor(species)')) + p9.geom_boxplot(outlier_shape = "None")+ p9.geom_jitter()
```


# Working with chunk options

## echo: false

```{python}
#| echo: false
p9.ggplot(data=penguins,
           mapping=p9.aes(x='factor(species)', y='bill_length_mm', color='factor(species)')) + p9.geom_boxplot(outlier_shape = "None")+ p9.geom_jitter()
```

## fig-cap

```{python}
#| echo: false
#| fig-cap: "Distribution of Bill length by Species"
p9.ggplot(data=penguins,
           mapping=p9.aes(x='factor(species)', y='bill_length_mm', color='factor(species)')) + p9.geom_boxplot(outlier_shape = "None")+ p9.geom_jitter()
```

## fig width

```{python}
#| echo: false
#| fig-cap: "Distribution of Bill length by Species"
#| fig-width: 8
p9.ggplot(data=penguins,
           mapping=p9.aes(x='factor(species)', y='bill_length_mm', color='factor(species)')) + p9.geom_boxplot(outlier_shape = "None")+ p9.geom_jitter()
```

## Suprress warnings and messages


```{python}
#| echo: false
#| fig-cap: "Distribution of Bill length by Species"
#| fig-width: 8
#| warning: false
#| message: false
p9.ggplot(data=penguins,
           mapping=p9.aes(x='factor(species)', y='bill_length_mm', color='factor(species)')) + p9.geom_boxplot(outlier_shape = "None")+ p9.geom_jitter()
```

## Fenced Echo


```{python}
#| echo: fenced
1 + 1
```


```{python}
1 + 1
```

##  `output` and `code-overflow`

```{python}
#| echo: fenced
#| output: false
#| code-overflow: wrap
1 + 1
```

```{python}
#| output: false
#| code-overflow: wrap
1 + 1
```

# Highlighting

```python
1 + 1
```

# Themes


```{yaml}
format:
  html:
    theme: united
```

```{yaml}
format:
  html: 
    theme: cosmo
    fontsize: 1.1em
    linestretch: 1.7
```

```{yaml}
format:
  html: 
    theme: darkly
```

# Folding Code

```{python}
#| code-fold: true
p9.ggplot(data=penguins,
           mapping=p9.aes(x='factor(species)', y='bill_length_mm', color='factor(species)')) + p9.geom_boxplot()
```

# Folding Code with `code-summary`

```{python}
#| code-fold: true
#| code-summary: "Show the code"
p9.ggplot(data=penguins,
           mapping=p9.aes(x='factor(species)', y='bill_length_mm', color='factor(species)')) + p9.geom_boxplot()
```

# Code-overflow

```{python}
#| code-overflow: wrap
p9.ggplot(data=penguins,
           mapping=p9.aes(x='factor(species)', y='bill_length_mm', color='factor(species)')) + p9.geom_boxplot()
```

# Table of content

```python
toc: true
toc-depth: 2

```

# Title banner

```python
title-block-banner: true
```

# Word document output

```python
format:
  docx:
    number-sections: true
    number-offset: 2
    number-depth: 3
    highlight-style: github
```